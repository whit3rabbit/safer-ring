[package]
name = "safer-ring"
version = "0.0.1"
edition = "2021"
authors = ["whit3rabbit"]
description = "A safe Rust wrapper around io_uring with zero-cost abstractions and compile-time memory safety guarantees"
license = "MIT OR Apache-2.0"
repository = "https://github.com/whit3rabbit/safer-ring"
homepage = "https://github.com/whit3rabbit/safer-ring"
documentation = "https://docs.rs/safer-ring"
readme = "README.md"
keywords = ["io-uring", "async", "io", "performance", "safety"]
categories = ["asynchronous", "network-programming", "filesystem"]
exclude = [
    "docs/*",
    "scripts/*",
    ".github/*",
    ".gitignore",
    ".claude",
    "repomix-output.xml",
    "TODO.md",
    ".kiro/*",
]

[dependencies]
pin-project = "1.1"
thiserror = "1.0"
tokio = { version = "1.0", features = ["rt", "rt-multi-thread", "net", "fs", "io-util", "macros"] }
static_assertions = "1.1"
libc = "0.2"
num_cpus = "1.16"

# io-uring is only available on Linux
[target.'cfg(target_os = "linux")'.dependencies]
io-uring = "0.7.10"

# For non-Linux platforms, we'll provide stub implementations
[target.'cfg(not(target_os = "linux"))'.dependencies]
# No io-uring dependency on non-Linux platforms

[dev-dependencies]
# Testing frameworks
tokio-test = "0.4"
proptest = "1.4"
loom = "0.7"
tempfile = "3.8"
futures = "0.3"

# For compile-fail tests
trybuild = "1.0"

# For compile-time assertions
static_assertions = "1.1"

# Benchmarking dependencies
criterion = { version = "0.5", features = ["html_reports"] }
pprof = { version = "0.14", features = ["criterion", "flamegraph"] }
jemallocator = "0.5"
num_cpus = "1.16"
chrono = { version = "0.4", features = ["serde"] }

[features]
default = []
# Enable unstable features for advanced io_uring operations
unstable = []

# Note: Some examples temporarily disabled due to API changes - will be updated in future releases
# [[example]]
# name = "echo_server"
# path = "examples/echo_server_main.rs"

# [[example]]
# name = "file_copy"
# path = "examples/file_copy.rs"

# file_copy_advanced.rs - INTENTIONALLY EXCLUDED from builds
# This example demonstrates fundamental PinnedBuffer API limitations
# and does not compile on Linux due to lifetime constraints.
# It exists only for educational purposes to show what doesn't work.
# [[example]]
# name = "file_copy_advanced"
# path = "examples/file_copy_advanced.rs"

[[example]]
name = "async_demo"
path = "examples/async_demo.rs"

# [[example]]
# name = "buffer_pool_demo"  
# path = "examples/buffer_pool_demo.rs"

# [[example]]
# name = "https_server"
# path = "examples/https_server.rs"

# [[example]]
# name = "performance_demo"
# path = "examples/performance_demo.rs"

# [[example]]
# name = "advanced_features_demo"
# path = "examples/advanced_features_demo.rs"

# [[example]]
# name = "safer_ring_demo"
# path = "examples/safer_ring_demo.rs"

[[bench]]
name = "simple_benchmarks"
harness = false

[[bench]]
name = "comparative_benchmarks"
path = "benches/comparative_benchmarks_main.rs"
harness = false

# Note: Some benchmarks disabled due to API changes - will be updated in future releases
# [[bench]]
# name = "orphan_tracker_contention"
# harness = false

# [[bench]]
# name = "simple_orphan_contention"
# harness = false

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# Configure loom for concurrency testing
[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }